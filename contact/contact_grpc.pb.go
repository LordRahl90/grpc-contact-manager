// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc_contact_manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContactManagerClient is the client API for ContactManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContactManagerClient interface {
	NewContact(ctx context.Context, in *Contact, opts ...grpc.CallOption) (*Contact, error)
	GetContactByID(ctx context.Context, in *FindContactRequest, opts ...grpc.CallOption) (*Contact, error)
	GetUserContacts(ctx context.Context, in *User, opts ...grpc.CallOption) (*ContactList, error)
	UpdateContact(ctx context.Context, in *Contact, opts ...grpc.CallOption) (*Contact, error)
}

type contactManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewContactManagerClient(cc grpc.ClientConnInterface) ContactManagerClient {
	return &contactManagerClient{cc}
}

func (c *contactManagerClient) NewContact(ctx context.Context, in *Contact, opts ...grpc.CallOption) (*Contact, error) {
	out := new(Contact)
	err := c.cc.Invoke(ctx, "/contact.ContactManager/NewContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactManagerClient) GetContactByID(ctx context.Context, in *FindContactRequest, opts ...grpc.CallOption) (*Contact, error) {
	out := new(Contact)
	err := c.cc.Invoke(ctx, "/contact.ContactManager/GetContactByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactManagerClient) GetUserContacts(ctx context.Context, in *User, opts ...grpc.CallOption) (*ContactList, error) {
	out := new(ContactList)
	err := c.cc.Invoke(ctx, "/contact.ContactManager/GetUserContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contactManagerClient) UpdateContact(ctx context.Context, in *Contact, opts ...grpc.CallOption) (*Contact, error) {
	out := new(Contact)
	err := c.cc.Invoke(ctx, "/contact.ContactManager/UpdateContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactManagerServer is the server API for ContactManager service.
// All implementations must embed UnimplementedContactManagerServer
// for forward compatibility
type ContactManagerServer interface {
	NewContact(context.Context, *Contact) (*Contact, error)
	GetContactByID(context.Context, *FindContactRequest) (*Contact, error)
	GetUserContacts(context.Context, *User) (*ContactList, error)
	UpdateContact(context.Context, *Contact) (*Contact, error)
	mustEmbedUnimplementedContactManagerServer()
}

// UnimplementedContactManagerServer must be embedded to have forward compatible implementations.
type UnimplementedContactManagerServer struct {
}

func (UnimplementedContactManagerServer) NewContact(context.Context, *Contact) (*Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewContact not implemented")
}
func (UnimplementedContactManagerServer) GetContactByID(context.Context, *FindContactRequest) (*Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetContactByID not implemented")
}
func (UnimplementedContactManagerServer) GetUserContacts(context.Context, *User) (*ContactList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserContacts not implemented")
}
func (UnimplementedContactManagerServer) UpdateContact(context.Context, *Contact) (*Contact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateContact not implemented")
}
func (UnimplementedContactManagerServer) mustEmbedUnimplementedContactManagerServer() {}

// UnsafeContactManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContactManagerServer will
// result in compilation errors.
type UnsafeContactManagerServer interface {
	mustEmbedUnimplementedContactManagerServer()
}

func RegisterContactManagerServer(s grpc.ServiceRegistrar, srv ContactManagerServer) {
	s.RegisterService(&ContactManager_ServiceDesc, srv)
}

func _ContactManager_NewContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Contact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactManagerServer).NewContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contact.ContactManager/NewContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactManagerServer).NewContact(ctx, req.(*Contact))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactManager_GetContactByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindContactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactManagerServer).GetContactByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contact.ContactManager/GetContactByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactManagerServer).GetContactByID(ctx, req.(*FindContactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactManager_GetUserContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactManagerServer).GetUserContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contact.ContactManager/GetUserContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactManagerServer).GetUserContacts(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContactManager_UpdateContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Contact)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactManagerServer).UpdateContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contact.ContactManager/UpdateContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactManagerServer).UpdateContact(ctx, req.(*Contact))
	}
	return interceptor(ctx, in, info, handler)
}

// ContactManager_ServiceDesc is the grpc.ServiceDesc for ContactManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContactManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contact.ContactManager",
	HandlerType: (*ContactManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewContact",
			Handler:    _ContactManager_NewContact_Handler,
		},
		{
			MethodName: "GetContactByID",
			Handler:    _ContactManager_GetContactByID_Handler,
		},
		{
			MethodName: "GetUserContacts",
			Handler:    _ContactManager_GetUserContacts_Handler,
		},
		{
			MethodName: "UpdateContact",
			Handler:    _ContactManager_UpdateContact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contact/contact.proto",
}

// UserManagerClient is the client API for UserManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserManagerClient interface {
	CreateNewUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error)
	Authenticate(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*User, error)
}

type userManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserManagerClient(cc grpc.ClientConnInterface) UserManagerClient {
	return &userManagerClient{cc}
}

func (c *userManagerClient) CreateNewUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/contact.UserManager/CreateNewUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userManagerClient) Authenticate(ctx context.Context, in *AuthUserRequest, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/contact.UserManager/Authenticate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserManagerServer is the server API for UserManager service.
// All implementations must embed UnimplementedUserManagerServer
// for forward compatibility
type UserManagerServer interface {
	CreateNewUser(context.Context, *CreateUserRequest) (*User, error)
	Authenticate(context.Context, *AuthUserRequest) (*User, error)
	mustEmbedUnimplementedUserManagerServer()
}

// UnimplementedUserManagerServer must be embedded to have forward compatible implementations.
type UnimplementedUserManagerServer struct {
}

func (UnimplementedUserManagerServer) CreateNewUser(context.Context, *CreateUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewUser not implemented")
}
func (UnimplementedUserManagerServer) Authenticate(context.Context, *AuthUserRequest) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Authenticate not implemented")
}
func (UnimplementedUserManagerServer) mustEmbedUnimplementedUserManagerServer() {}

// UnsafeUserManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserManagerServer will
// result in compilation errors.
type UnsafeUserManagerServer interface {
	mustEmbedUnimplementedUserManagerServer()
}

func RegisterUserManagerServer(s grpc.ServiceRegistrar, srv UserManagerServer) {
	s.RegisterService(&UserManager_ServiceDesc, srv)
}

func _UserManager_CreateNewUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).CreateNewUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contact.UserManager/CreateNewUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).CreateNewUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserManager_Authenticate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserManagerServer).Authenticate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contact.UserManager/Authenticate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserManagerServer).Authenticate(ctx, req.(*AuthUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserManager_ServiceDesc is the grpc.ServiceDesc for UserManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "contact.UserManager",
	HandlerType: (*UserManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewUser",
			Handler:    _UserManager_CreateNewUser_Handler,
		},
		{
			MethodName: "Authenticate",
			Handler:    _UserManager_Authenticate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contact/contact.proto",
}
